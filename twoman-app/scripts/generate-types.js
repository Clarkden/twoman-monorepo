const fs = require("fs");
const path = require("path");
const { compile } = require("json-schema-to-typescript");

const schemasDir = path.join(__dirname, "../schemas");
const outputDir = path.join(__dirname, "../types/generated");

// Ensure output directory exists
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

async function generateTypes() {
  const schemaFiles = fs
    .readdirSync(schemasDir)
    .filter((file) => file.endsWith(".json"));

  const generatedTypes = [];

  for (const file of schemaFiles) {
    const schemaPath = path.join(schemasDir, file);
    const schema = JSON.parse(fs.readFileSync(schemaPath, "utf8"));

    try {
      const ts = await compile(
        schema,
        schema.title || file.replace(".json", ""),
        {
          bannerComment: "",
          style: {
            bracketSpacing: true,
            singleQuote: true,
          },
        },
      );

      const typeName = file
        .replace(".json", "")
        .split("_")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join("");

      generatedTypes.push({
        name: typeName,
        content: ts,
      });

      console.log(`Generated types for ${file}`);
    } catch (error) {
      console.error(`Error generating types for ${file}:`, error);
    }
  }

  // Create index file that exports all types
  const indexContent = `// Auto-generated WebSocket message types
// Do not edit this file manually

${generatedTypes.map(({ content }) => content).join("\n")}

// Envelope structure
export interface WebSocketEnvelope {
  type: string;
  v: string;
  correlationId: string;
  payload: any;
}

export interface WebSocketResponse {
  type: string;
  v: string;
  correlationId: string;
  kind: 'REQUEST' | 'RESPONSE' | 'EVENT' | 'ERROR';
  payload?: any;
  error?: {
    code: string;
    message: string;
  };
}

// Helper type for creating validated messages
export interface ValidatedMessage<T = any> {
  type: string;
  v: string;
  correlationId: string;
  payload: T;
}
`;

  fs.writeFileSync(path.join(outputDir, "websocket-types.ts"), indexContent);
  console.log("Generated WebSocket types index file");
}

generateTypes().catch(console.error);
