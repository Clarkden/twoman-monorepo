// Auto-generated WebSocket message types
// Do not edit this file manually

/**
 * WebSocket authorization payload
 */
export interface AuthorizationMessage {
  /**
   * Session token for authentication
   */
  session: string;
  /**
   * Client version
   */
  version: string;
}

/**
 * WebSocket chat message payload
 */
export interface ChatMessage {
  /**
   * The chat message content
   */
  message: string;
  /**
   * ID of the match this message belongs to
   */
  match_id: number;
}

/**
 * WebSocket connection failed payload
 */
export interface ConnectionFailedMessage {
  /**
   * Error message
   */
  message: string;
  /**
   * Error code
   */
  code: 'UNAUTHORIZED' | 'INVALID_MESSAGE_TYPE' | 'INVALID_AUTH_DATA' | 'INVALID_AUTH_TOKEN' | 'INVALID_SESSION';
}

/**
 * WebSocket connection success payload
 */
export interface ConnectionSuccessMessage {
  /**
   * Success message
   */
  message: string;
}

/**
 * Envelope for all WebSocket messages
 */
export interface WebSocketMessageEnvelope {
  /**
   * The message type/subject
   */
  type:
    | 'authorization'
    | 'chat'
    | 'match'
    | 'profile'
    | 'ping'
    | 'connection_success'
    | 'connection_failed'
    | 'profile_response';
  /**
   * Message schema version
   */
  v: string;
  /**
   * Unique identifier to correlate request/response pairs
   */
  correlationId: string;
  /**
   * The actual message data, validated against the specific schema for this type
   */
  payload: {
    [k: string]: unknown;
  };
}

/**
 * WebSocket match action payload
 */
export interface MatchActionMessage {
  /**
   * The match action to perform
   */
  action: 'accept' | 'reject' | 'update_target' | 'friend_match' | 'unmatch';
  /**
   * ID of the match
   */
  match_id: number;
  /**
   * Target profile ID (optional, used for specific actions)
   */
  target_profile?: number;
}

/**
 * WebSocket ping payload
 */
export interface PingMessage {}

/**
 * WebSocket profile decision payload
 */
export interface ProfileDecisionMessage {
  /**
   * The profile decision
   */
  decision: 'like' | 'pass' | 'super_like';
  /**
   * Whether this is a duo decision
   */
  is_duo?: boolean;
  /**
   * Friend profile ID for duo decisions
   */
  friend_profile?: number;
  /**
   * Target profile ID being decided on
   */
  target_profile: number;
}

/**
 * WebSocket profile response payload
 */
export interface ProfileResponseMessage {
  /**
   * Response message
   */
  message: string;
  /**
   * Whether the operation was successful
   */
  success: boolean;
}


// Envelope structure
export interface WebSocketEnvelope {
  type: string;
  v: string;
  correlationId: string;
  payload: any;
}

export interface WebSocketResponse {
  type: string;
  v: string;
  correlationId: string;
  kind: 'REQUEST' | 'RESPONSE' | 'EVENT' | 'ERROR';
  payload?: any;
  error?: {
    code: string;
    message: string;
  };
}

// Helper type for creating validated messages
export interface ValidatedMessage<T = any> {
  type: string;
  v: string;
  correlationId: string;
  payload: T;
}
